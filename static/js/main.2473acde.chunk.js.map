{"version":3,"sources":["logo.svg","components/Header.js","components/OptionsTab.js","components/Column.js","components/TableHead.js","components/TableRow.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","OptionsTab","props","Column","displayVar","TableHead","TableRow","myId","Directory","state","testVar","sortAscending","filter","employeeArray","id","firstName","lastName","this","setState","getEmployees","EmployeeList","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uYAAAA,EAAOC,QAAU,IAA0B,kC,yFCYxBC,MAPnB,WACI,OACI,yBAAKC,UAAW,qBAChB,2E,4BCcWC,MAnBnB,SAAoBC,GAChB,OAGA,yBAAKF,UAAU,OACX,yBAAKA,UAAW,UAChB,wGAEJ,yDACA,yDACA,4EACA,kFCFeG,MATnB,SAAgBD,GACZ,OACI,yBAAKF,UAAW,UACZ,8BAAOE,EAAME,cCeVC,MAbf,SAAmBH,GACf,OACI,yBAAKF,UAAW,OACZ,kBAAC,EAAD,CAAQI,WAAY,OACpB,kBAAC,EAAD,CAAQA,WAAY,eACpB,kBAAC,EAAD,CAAQA,WAAY,cACpB,kBAAC,EAAD,CAAQA,WAAY,iBCWjBE,MAhBf,SAAkBJ,GACd,OACI,yBAAKF,UAAW,OACZ,kBAAC,EAAD,CAAQI,WAAYF,EAAMK,OAC1B,kBAAC,EAAD,CAAQH,WAAY,2BACpB,kBAAC,EAAD,CAAQA,WAAY,0BACpB,kBAAC,EAAD,CAAQA,WAAY,2BACpB,kBAAC,EAAD,CAAQA,WAAYF,EAAME,e,OC8EvBI,E,kDA/DX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,QAAS,GACTC,eAAe,EACfC,OAAQ,MAERC,cAAe,CAAC,CAACC,GAAG,MAAOC,UAAW,QAASC,SAAU,UAP9C,E,2DAiBfC,KAAKC,SAAS,CACVR,QAAS,O,0CAObO,KAAKE,iB,8EASL,OACI,6BACI,kBAAC,EAAD,MACA,2BAAOnB,UAAU,oBACb,+BACI,kBAAC,EAAD,OAEJ,+BACI,kBAAC,EAAD,CAEII,WAAY,UAKhB,kBAAC,EAAD,MACCgB,EAAa,GAAGN,U,GAnDjBO,IAAMC,WCXfC,MAZf,WACE,OACE,yBAAKvB,UAAW,gCAGd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2473acde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={\"App-header row-lg\"}> \r\n        <h1>Welcome to the Employee Monitoring System</h1> \r\n        </div>\r\n        );\r\n    }\r\n    export default Header;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction OptionsTab(props) {\r\n    return (\r\n    \r\n    \r\n    <div className=\"row\">\r\n        <div className={\"col-12\"}>\r\n        <p>This will contain buttons for filtering, \r\n    sorting and displaying employees</p>\r\n    <p>Filter Options: Department</p>\r\n    <p>add a filter by role later</p>\r\n    <p>Sort by id, department, firstname or lastname</p>\r\n    <p>add a ascending or descending order toggle later</p>\r\n    {/* filter by should be a dropdown - should I grab the dropdown options from variables or hardcode them? */}\r\n    {/* sort ascending or descending should be a toggle or a single button */}\r\n    {/*  */}\r\n    </div>\r\n    </div>\r\n    );\r\n    }\r\n    export default OptionsTab;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction Column(props) {\r\n    return (\r\n        <div className={\"col-sm\"}> \r\n            <span>{props.displayVar}</span>\r\n       </div>\r\n       \r\n        \r\n        );\r\n    }\r\n    export default Column;\r\n    // 6 columns in each row right now...","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Column from \"./Column\"\r\n\r\n// should I rename this EmployeeRow?\r\n\r\n// need to figure out how to make this appear as a single row in a table... \r\n//probably do that from directory\r\nfunction TableHead(props) {\r\n    return (\r\n        <div className={\"row\"}>\r\n            <Column displayVar={\"ID\"} />\r\n            <Column displayVar={\"First Name\"} />\r\n            <Column displayVar={\"Last Name\"} />\r\n            <Column displayVar={\"Department\"} />\r\n            {/* role */}\r\n            {/* salary */}\r\n            {/* add an employee rating or review; 1-5 perhaps? */}\r\n        </div>\r\n        );\r\n}\r\nexport default TableHead;\r\n\r\n    // this should be a single row of informaion; \r\n    //so a bunch of columns displaying a specific stat for each empoloyee\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Column from \"./Column\"\r\n\r\n// should I rename this EmployeeRow?\r\n\r\n\r\n// need to figure out how to make this appear as a single row in a table... \r\n//probably do that from directory\r\nfunction TableRow(props) {\r\n    return (\r\n        <div className={\"row\"}>\r\n            <Column displayVar={props.myId} />\r\n            <Column displayVar={\"First Name_placeholder\"} />\r\n            <Column displayVar={\"Last Name_placeholder\"} />\r\n            <Column displayVar={\"Department_placeholder\"} />\r\n            <Column displayVar={props.displayVar} />\r\n            {/* <Column displayVar={this.state.testVar} */}\r\n            {/* <Column displayVar={props.col1} */}\r\n            {/* role */}\r\n            {/* salary */}\r\n            {/* add an employee rating or review; 1-5 perhaps? */}\r\n        </div>\r\n        );\r\n}\r\nexport default TableRow;\r\n\r\n    // this should be a single row of informaion; \r\n    //so a bunch of columns displaying a specific stat for each empoloyee","import React from \"react\";\r\nimport OptionsTab from \"../components/OptionsTab\";\r\nimport \"../App.css\";\r\nimport TableHead from \"../components/TableHead\"\r\nimport TableRow from \"../components/TableRow\"\r\n// consider renaming DirectoryTable?\r\nimport EmployeeList from  \"../utils/EmployeeList.json\"\r\n\r\n\r\n\r\n// let employeeArr = [\r\n//     { id: \"ae01\",\r\n//         firstName: \"Mike\",\r\n//         lastName: \"Wizowski\"\r\n//     },\r\n//     { id: \"ae02\",\r\n//          firstName: \"Shawn\", \r\n//         lastName: \"Fawnson\"\r\n//     },\r\n//     {   id: \"ae03\",\r\n//          firstName: \"Karla\",\r\n//         lastName: \"Landsdottir\"\r\n//     }\r\n//     //need to check how to do this right\r\n//     //does this need to be in state?\r\n\r\n// ]\r\n\r\n\r\n// function Directory() {\r\nclass Directory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            testVar: 17,\r\n            sortAscending: true,\r\n            filter: \"all\",\r\n            //data is not in the state right now... \r\n            employeeArray: [{id:\"zz1\", firstName: \"test1\", lastName: \"est2\"}]\r\n\r\n\r\n        };\r\n\r\n        //I can set state in a constructor or not have a constructor and just set state once\r\n        //but after state is set setState needs to be called to update it\r\n    }\r\n    getEmployees() {\r\n        // this needs to pull in the employee array.... and set it into state?\r\n        this.setState({\r\n            testVar: 12\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        //runs after output is rendered to DOM...\r\n        //so put anything that needs to function each time compenent is rendered here\r\n        this.getEmployees();    //this should populate employee data...\r\n        //how?\r\n\r\n    }\r\n    componentWillUpdate() {\r\n        //sounds like this should be used as a deconstructor... but \r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <OptionsTab />\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                        <TableHead />\r\n                    </thead>\r\n                    <tbody>\r\n                        <TableRow \r\n                            // displasyVar ={this.state.value}\r\n                            displayVar={\"empty\"}\r\n                            // col2={\"empty\"}\r\n                            // there has to be a better way to do this...\r\n                            // xxx={this.state.datapoint}\r\n                        />\r\n                        <TableRow />\r\n                        {EmployeeList[0].id}    \r\n                        {/* this might work... getting closer */}\r\n                    </tbody>\r\n                    {/* <p>TestVar {this.state.testVar}</p> */}\r\n                </table>\r\n            </div>\r\n        );\r\n        // need to figure out how to make this appear multiple times...\r\n        //and tables https://getbootstrap.com/docs/4.5/content/tables/\r\n        // https://www.w3schools.com/html/html_tables.asp\r\n\r\n    }\r\n}\r\nexport default Directory;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/Header\"\nimport Directory from \"./pages/Directory\"\n// import OptionsTab from \"./components/OptionsTab\";\n\nfunction App() {\n  return (\n    <div className={\"container-lg main-background\"}>\n      {/* bootsap needs testing - does multiple classes work? */}\n\n      <Header />\n      <Directory />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}